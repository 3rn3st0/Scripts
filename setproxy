#!/usr/bin/env zsh

declare -g PATHSCRIPT=$(dirname "$0")                                   # Capturo la ruta y nombre del script
declare -g SCRIPTNAME=$(basename "$0")                                  # Extraigo el nombre del script de $PATHSCRIPT
declare -g PARAMETERS=${@}                                              # Parámetros que recibe la aplicación
declare -g INCLUDES="${PATHSCRIPT}/include"

source "${INCLUDES}/env.sh"
source "${INCLUDES}/setcolors.sh"

declare -g VERSION="0.0.1b"
declare -g UPDATED="2018-07-17 08:28"

function proxyOn() {
    export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"

    if (( $# > 0 )); then
        valid=$(echo $@ | sed -n 's/\([0-9]\{1,3\}.\)\{4\}:\([0-9]\+\)/&/p')
        if [[ $valid != $@ ]]; then
            >&2 echo "Dirección IP inválida"
            return 1
        fi

        export http_proxy="http://$1/" \
               https_proxy=$http_proxy \
               ftp_proxy=$http_proxy \
               rsync_proxy=$http_proxy
        echo "Variables de entorno del proxy establecidas."
        return 0
    fi

    # echo -n "Usuario: "; read username
    echo -n "Usuario: "; read username
    if [[ $username != "" ]]; then
        echo -n "Contraseña: "; read -s password; echo -n " "
        local pre="$username:$password@"
    fi

    echo -n "Servidor: "; read server
    echo -n "Puerto: "; read port

	echo "http://$pre$server:$port/"

    export http_proxy="http://$pre$server:$port/" \
           https_proxy=$http_proxy \
           ftp_proxy=$http_proxy \
           rsync_proxy=$http_proxy \
           HTTP_PROXY=$http_proxy \
           HTTPS_PROXY=$http_proxy \
           FTP_PROXY=$http_proxy \ 
           RSYNC_PROXY=$http_proxy
}

function proxyOff(){
    unset http_proxy https_proxy ftp_proxy rsync_proxy \
          HTTP_PROXY HTTPS_PROXY FTP_PROXY RSYNC_PROXY
    echo -e "Configuración del entorno del proxy removida."
}


setColors

if [[ "$#" -lt 1 ]]; then
    # showHelp
else
    if [[ -z ${PARAMETERS} ]]; then
        # showHelp
    else
        for PARAM in ${PARAMETERS}; do
            case ${PARAM} in
                --on)
                    proxyOn;;
                --off)
                    proxyOff;;
                *)
                    printf "\n   ${BROJO}${FBLCO}ERROR: parámetro desconocido \"$PARAM\"${SCLR}\n";;
                    # showHelp;;
            esac
            # Salta al siguiente parámetro
            shift
        done
    fi
fi